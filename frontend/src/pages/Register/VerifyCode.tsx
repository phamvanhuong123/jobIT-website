import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import styles from "./VerifyCode.module.css";
import axios from "axios";

const VerifyCode: React.FC = () => {
  const [code, setCode] = useState("");
  const [message, setMessage] = useState("");
  const [status, setStatus] = useState<"success" | "error" | "">("");
  const navigate = useNavigate();
  const [countdown, setCountdown] = useState(60);
  const [isCounting, setIsCounting] = useState(true);

  // L·∫•y d·ªØ li·ªáu t·ª´ localStorage
  const registerInfo = JSON.parse(localStorage.getItem("registerInfo") || "{}");
  const { email, password, fullName } = registerInfo;

  // ƒê·∫øm ng∆∞·ª£c
  useEffect(() => {
    let timer: NodeJS.Timeout;

    if (isCounting && countdown > 0) {
      timer = setTimeout(() => setCountdown(countdown - 1), 1000);
    }

    if (countdown === 0) {
      setIsCounting(false);
    }

    return () => clearTimeout(timer);
  }, [countdown, isCounting]);

  // X·ª≠ l√Ω x√°c th·ª±c
  const handleVerify = async () => {
    if (!email || !password || !fullName) {
      setMessage("‚ùå Thi·∫øu th√¥ng tin ƒëƒÉng k√Ω. Vui l√≤ng th·ª≠ l·∫°i t·ª´ ƒë·∫ßu.");
      setStatus("error");
      return;
    }

    try {
      await axios.post("http://localhost:5000/api/register-otp", {
        email,
        password,
        username: fullName,
        otp: code,
      });

      setStatus("success");
      setMessage("‚úÖ X√°c th·ª±c th√†nh c√¥ng!");

      // Xo√° localStorage ƒë·ªÉ tr√°nh l·ªói sau n√†y
      localStorage.removeItem("registerInfo");

      // Chuy·ªÉn sang trang ƒëƒÉng nh·∫≠p
      setTimeout(() => {
        navigate("/dang-nhap");
      }, 2000);
    } catch (err) {
      console.error("L·ªói x√°c th·ª±c OTP:", err);
      setStatus("error");
      setMessage("‚ùå M√£ kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
    }
  };

  const handleResendCode = async () => {
    if (!email) {
      setMessage("‚ùå Kh√¥ng t√¨m th·∫•y email ƒë·ªÉ g·ª≠i l·∫°i m√£.");
      setStatus("error");
      return;
    }

    try {
      await axios.post("http://localhost:5000/api/register", { email });
      setCountdown(60);
      setIsCounting(true);
      setMessage("üì® M√£ m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i v√†o email c·ªßa b·∫°n!");
      setStatus("success");
    } catch (err) {
      console.error("L·ªói g·ª≠i l·∫°i m√£:", err);
      setMessage("‚ùå Kh√¥ng th·ªÉ g·ª≠i l·∫°i m√£. Vui l√≤ng th·ª≠ l·∫°i.");
      setStatus("error");
    }
  };

  return (
    <div className={styles.container}>
      <h2>X√°c Th·ª±c Email</h2>
      <p>Nh·∫≠p m√£ ƒë√£ g·ª≠i ƒë·∫øn email c·ªßa b·∫°n:</p>
      <input
        type="text"
        value={code}
        onChange={(e) => setCode(e.target.value)}
        onKeyDown={(e) => {
          if (e.key === "Enter") handleVerify();
        }}
        placeholder="Nh·∫≠p m√£ x√°c th·ª±c"
        className={styles.input}
      />
      <button onClick={handleVerify} className={styles.button}>
        X√°c Th·ª±c
      </button>

      {message && (
        <p className={status === "success" ? styles.success : styles.error}>
          {message}
        </p>
      )}

      <p className={styles.resendText}>
        {!isCounting ? (
          <>
            Kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£?{" "}
            <button className={styles.resendButton} onClick={handleResendCode}>
              G·ª≠i l·∫°i m√£
            </button>
          </>
        ) : (
          <>G·ª≠i l·∫°i m√£ sau {countdown}s</>
        )}
      </p>
    </div>
  );
};

export default VerifyCode;
